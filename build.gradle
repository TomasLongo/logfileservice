apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
version = '2.0.1'

mainClassName = "de.tlongo.serveranalytics.services.logfileservice.LogService"

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.sparkjava:spark-core:2.0.0'
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile 'commons-cli:commons-cli:1.2'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.springframework.data:spring-data-jpa:1.7.0.RELEASE'
    compile 'ch.qos.logback:logback-classic:1.1.1'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
    compile('org.hibernate:hibernate-entitymanager:4.3.6.Final') {
        //The pacage that comes with hibernate is not Java8 compatible
        exclude group: 'org.javassist'
    }
    compile 'org.javassist:javassist:3.18.2-GA'
    compile 'mysql:mysql-connector-java:5.1.6'

    testCompile 'org.springframework:spring-test:4.0.7.RELEASE'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

installApp {
    // copy the configs to external folder
    into("lib/config") {
        from 'src/main/resources'
        include '*'
    }
}

distZip {
    archiveName = "${project.name}.zip"
    ext.versionFileName ="${version}.version"
    ext.versionFile = file(versionFileName)

    // copy the configs to external folder
    into("$baseName/lib/config") {
        from 'src/main/resources'
        include '*'
    }

    into("$baseName") {
        from "${project.projectDir.toPath().toAbsolutePath().toString()}"
        include versionFileName
    }

    doFirst {
        versionFile.createNewFile()
    }

    doLast {
        versionFile.delete()
    }
}

// Adde the config folder to the classpath of the config script
startScripts.classpath += files("config")
